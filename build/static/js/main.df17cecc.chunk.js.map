{"version":3,"sources":["components/overviewItem.js","components/overview.js","App.js","serviceWorker.js","index.js"],"names":["overviewItem","props","state","liked","likedButton","__html","this","name","description","value","setState","className","href","cho","title","src","imageLink","alt","placeName","dangerouslySetInnerHTML","createMarkup","onClick","updateSaved","like","React","Component","Overview","loading","items","data","map","item","i","key","App","place","currentSelected","places","url","saved","includes","list","index","indexOf","console","log","splice","localStorage","setItem","JSON","stringify","current","push","updatePlace","getData","getSaved","getItem","parse","query","fetch","encodeURIComponent","response","json","masks","results","bindings","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df17cecc.chunk.js","sourcesContent":["import React from 'react';\n\nclass overviewItem extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tliked: \"far fa-heart\",\n\t\t\tlikedButton: \"button-like\"\n\t\t}\n\t}\n\n\tcreateMarkup() {\n\t  return {__html: this.props.name.description.value};\n\t}\n\n\tlike(){\n\t\tif(this.state.liked===\"far fa-heart\"){\n\t\t\tthis.setState({\n\t\t\t\tliked:\"fas fa-heart\",\n\t\t\t\tlikedButton:\"button-like-active\"\n\t\t\t})\n\t\t}else {\n\t\t\tthis.setState({\n\t\t\t\tliked: \"far fa-heart\",\n\t\t\t\tlikedButton: \"button-like\"\n\t\t\t})\n\t\t}\n\t}\n\n\trender(){\n\t\treturn (<div className=\"overviewItem\"><a href={this.props.name.cho.value}>\n\t\t\t<h2>{this.props.name.title.value}</h2></a>\n\t\t\t<img src={this.props.name.imageLink.value} alt={this.props.name.title.value}/>\n\t\t\t<div className=\"overview_info\">\n\t\t\t\t<p>{this.props.name.placeName.value}</p>\n\t\t\t\t<p className=\"overview_description\" dangerouslySetInnerHTML={this.createMarkup()} />\n\t\t\t</div>\n\t\t\t<button className={this.state.likedButton} onClick={()=>{this.props.updateSaved(this.props.name); this.like()}}><i className={this.state.liked}></i></button>\n\t\t</div>)\n\t}\n\n}\n\nexport default overviewItem\n","import React from 'react';\nimport OverviewItem from './overviewItem.js'\n\nclass Overview extends React.Component {\n\n\trender(){\n\t\tif(this.props.loading === true){\n\t\t\treturn <div>Loading...</div>\n\t\t}else{\n\t\t\tlet items = this.props.data.map(\n\t\t\t\t(item, i) => (\n\t\t\t\t\t<OverviewItem updateSaved={this.props.updateSaved} key={i} name={item}/>\n\t\t\t))\n\t\t\treturn(\n\t\t\t\t<div className=\"overview\">{items}</div>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default Overview\n","import React from 'react';\nimport './App.css';\nimport Overview from './components/overview.js'\n\nclass App extends React.Component {\n\tstate = {\n\t\tloading:true,\n\t\tplace:\"https://hdl.handle.net/20.500.11840/termmaster7745\",\n\t\tcurrentSelected:\"https://hdl.handle.net/20.500.11840/termmaster7745\",\n\t\tplaces: [\n\t\t\t{\n\t\t\t\tname:\"IndonesiÃ«\",\n\t\t\t\turl:\"https://hdl.handle.net/20.500.11840/termmaster7745\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname:\"Amerika\",\n\t\t\t\turl:\"https://hdl.handle.net/20.500.11840/termmaster6582\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname:\"Canada(British columbia)\",\n\t\t\t\turl:\"https://hdl.handle.net/20.500.11840/termmaster6784\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname:\"New britain\",\n\t\t\t\turl:\"https://hdl.handle.net/20.500.11840/termmaster6856\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tname:\"saved\",\n\t\t\t\turl:\"saved\"\n\t\t\t}\n\t\t],\n\t\tsaved:[]\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.getData()\n\t\tthis.getSaved()\n\t}\n\n\tgetSaved(){\n\t\tif(localStorage.getItem('saved')){\n\t\t\tthis.setState({saved: JSON.parse(localStorage.getItem('saved'))})\n\t\t}\n\t}\n\n\tupdateSaved = (item)=>{\n\t\tif(this.state.saved.includes(item)){\n\t\t\tlet list = this.state.saved\n\t\t\tlet index = list.indexOf(item)\n\t\t\tconsole.log(this.state.saved);\n\t\t\tif (index > -1) {\n\t\t\t  list.splice(index, 1);\n\t\t\t  this.setState({saved:list}, console.log(this.state.saved))\n\t\t\t  localStorage.setItem('saved', JSON.stringify(list))\n\t\t\t}\n\t\t}else{\n\t\t\tlet current = this.state.saved\n\t\t\tcurrent.push(item)\n\t\t\tthis.setState({saved: current})\n\t\t\tlocalStorage.setItem('saved', JSON.stringify(current))\n\t\t}\n\t}\n\n\t//Data request\n\tasync getData(){\n\t\tconst url =\"https://api.data.netwerkdigitaalerfgoed.nl/datasets/ivo/NMVW/services/NMVW-35/sparql\"\n\t\tconst query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX dc: <http://purl.org/dc/elements/1.1/>\n\t\tPREFIX dct: <http://purl.org/dc/terms/>\n\t\tPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\t\tPREFIX edm: <http://www.europeana.eu/schemas/edm/>\n\t\tPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\t\tPREFIX hdlh: <https://hdl.handle.net/20.500.11840/termmaster>\n\t\tSELECT * WHERE {\n\t\t      <${this.state.place}> skos:narrower* ?place .\n\t\t      ?place skos:prefLabel ?placeName .\n\t\t VALUES ?type { \"masker\" \"Masker\" }\n\t\t     ?cho dct:spatial ?place ;\n\t\t       dc:type ?type ;\n\t\t       dc:title ?title ;\n\t\t       dc:description ?description ;\n\t\t         edm:isShownBy ?imageLink\n\t\t}\n\t\tGROUP BY ?place ?placeName\n\t\t`\n\t\tlet response = await fetch(url+\"?query=\"+ encodeURIComponent(query) +\"&format=json\")\n\t\tconst data = await response.json();\n\t\tthis.setState({\n\t\t\tmasks:data.results.bindings,\n\t\t\tloading: false\n\t\t})\n\t}\n\n\t//change current url state based on nav input\n\tupdatePlace(url){\n\t\tif(url!==\"saved\"){\n\t\t\tthis.setState({place:url, currentSelected:url}, ()=>{this.getData()})\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tmasks:this.state.saved,\n\t\t\t\tloading: false,\n\t\t\t\tcurrentSelected:\"saved\"\n\t\t\t})\n\t\t}\n\t}\n\n\t//map nav items based on places object\n\titems = this.state.places.map(\n\t\t(place, i) => {\n\t\t\tif(place.url=== this.state.currentSelected){\n\t\t\t\treturn <li key={i} className=\"selected\" onClick={()=>{this.updatePlace(place.url)}}>{place.name}</li>\n\t\t\t}else{\n\t\t\t\treturn <li key={i} onClick={()=>{this.updatePlace(place.url)}}>{place.name}</li>\n\t\t\t}\n\t})\n\n\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <header className=\"App-header\">\n\t        <h1>Maskers van de wereld</h1>\n\t\t\t<ul>\n\t\t\t\t{this.items}\n\t\t\t</ul>\n\t      </header>\n\t\t  <Overview updateSaved={this.updateSaved} loading={this.state.loading} data={this.state.masks} place={this.state.place}/>\n\t    </div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}